"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2036],{72036:function(e,n,a){a.d(n,{o:function(){return t}});var t=[{id:1,type:"template",title:"Create table",description:'Basic table template. Change "table_name" to the name you prefer.',sql:"create table table_name (\n  id bigint generated by default as identity primary key,\n  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,\n  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,\n  data jsonb,\n  name text\n);"},{id:2,type:"template",title:"Add column",description:"Template to add a column. Make sure to change the name and type.",sql:"alter table table_name\nadd column new_column_name data_type;"},{id:3,type:"template",title:"Add comments",description:"Templates to add a comment to either a table or a column.",sql:"comment on table table_name is 'Table description';\ncomment on column table_name.column_name is 'Column description';"},{id:4,type:"template",title:"Show extensions",description:"Get a list of extensions in your database and status.",sql:"select\n  name, comment, default_version, installed_version\nfrom\n  pg_available_extensions\norder by\n  name asc;"},{id:5,type:"template",title:"Show version",description:"Get your Postgres version.",sql:"select * from\n  (select version()) as version,\n  (select current_setting('server_version_num')) as version_number;"},{id:6,type:"template",title:"Show active connections",description:"Get the number of active and max connections.",sql:"select * from\n(select count(pid) as active_connections FROM pg_stat_activity where state = 'active') active_connections,\n(select setting as max_connections from pg_settings where name = 'max_connections') max_connections;"},{id:7,type:"template",title:"Automatically update timestamps",description:"Update a column timestamp on every update.",sql:'\ncreate extension if not exists moddatetime schema extensions;\n\n-- assuming the table name is "todos", and a timestamp column "updated_at"\n-- this trigger will set the "updated_at" column to the current timestamp for every update\ncreate trigger\n  handle_updated_at before update\non todos\nfor each row execute\n  procedure moddatetime(updated_at);\n  '.trim()},{id:8,type:"template",title:"Increment field value",description:"Update a field with incrementing value using stored procedure.",sql:"\ncreate function increment(row_id int)\nreturns void as\n$$\n  update table_name\n  set field_name = field_name + 1\n  where id = row_id;\n$$\nlanguage sql volatile;\n\n-- you can call the function from your browser with supabase-js\n-- const { data, error } = await supabase.rpc('increment', { row_id: 2 })\n  ".trim()},{id:9,type:"template",title:"pg_stat_statements report",description:"Select from pg_stat_statements and view recent queries",sql:"-- pg_stat_statements report\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows,\n    statements.wal_bytes,\n    statements.wal_records\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    total_time desc\n  limit\n    100;"},{id:10,type:"quickstart",title:"Countries",description:"Create a table with all the countries in the world.",sql:"create type public.continents as enum (\n    'Africa',\n    'Antarctica',\n    'Asia',\n    'Europe',\n    'Oceania',\n    'North America',\n    'South America'\n);\ncreate table public.countries (\n  id bigint generated by default as identity primary key,\n  name text,\n  iso2 text not null,\n  iso3 text,\n  local_name text,\n  continent continents\n);\ncomment on table countries is 'Full list of countries.';\ncomment on column countries.name is 'Full country name.';\ncomment on column countries.iso2 is 'ISO 3166-1 alpha-2 code.';\ncomment on column countries.iso3 is 'ISO 3166-1 alpha-3 code.';\ncomment on column countries.local_name is 'Local variation of the name.';\ninsert into public.countries (name,iso2,iso3,local_name,continent) values\n  ('Bonaire, Sint Eustatius and Saba','BQ','BES',null,null),\n  ('Cura\xe7ao','CW','CUW',null,null),\n  ('Guernsey','GG','GGY',null,null),\n  ('Isle of Man','IM','IMN',null,null),\n  ('Jersey','JE','JEY',null,null),\n  ('\xc5land Islands','AX','ALA',null,null),\n  ('Montenegro','ME','MNE',null,null),\n  ('Saint Barth\xe9lemy','BL','BLM',null,null),\n  ('Saint Martin (French part)','MF','MAF',null,null),\n  ('Serbia','RS','SRB',null,null),\n  ('Sint Maarten (Dutch part)','SX','SXM',null,null),\n  ('South Sudan','SS','SSD',null,null),\n  ('Timor-Leste','TL','TLS',null,null),\n  ('American Samoa','as','ASM','Amerika Samoa','Oceania'),\n  ('Andorra','AD','AND','Andorra','Europe'),\n  ('Angola','AO','AGO','Angola','Africa'),\n  ('Anguilla','AI','AIA','Anguilla','North America'),\n  ('Antarctica','AQ','ATA','','Antarctica'),\n  ('Antigua and Barbuda','AG','ATG','Antigua and Barbuda','North America'),\n  ('Argentina','AR','ARG','Argentina','South America'),\n  ('Armenia','AM','ARM','Hajastan','Asia'),\n  ('Aruba','AW','ABW','Aruba','North America'),\n  ('Australia','AU','AUS','Australia','Oceania'),\n  ('Austria','AT','AUT','\xd6sterreich','Europe'),\n  ('Azerbaijan','AZ','AZE','Azerbaijan','Asia'),\n  ('Bahamas','BS','BHS','The Bahamas','North America'),\n  ('Bahrain','BH','BHR','Al-Bahrayn','Asia'),\n  ('Bangladesh','BD','BGD','Bangladesh','Asia'),\n  ('Barbados','BB','BRB','Barbados','North America'),\n  ('Belarus','BY','BLR','Belarus','Europe'),\n  ('Belgium','BE','BEL','Belgium/Belgique','Europe'),\n  ('Belize','BZ','BLZ','Belize','North America'),\n  ('Benin','BJ','BEN','Benin','Africa'),\n  ('Bermuda','BM','BMU','Bermuda','North America'),\n  ('Bhutan','BT','BTN','Druk-Yul','Asia'),\n  ('Bolivia','BO','BOL','Bolivia','South America'),\n  ('Bosnia and Herzegovina','BA','BIH','Bosna i Hercegovina','Europe'),\n  ('Botswana','BW','BWA','Botswana','Africa'),\n  ('Bouvet Island','BV','BVT','Bouvet Island','Antarctica'),\n  ('Brazil','BR','BRA','Brasil','South America'),\n  ('British Indian Ocean Territory','IO','IOT','British Indian Ocean Territory','Africa'),\n  ('Brunei Darussalam','BN','BRN','Brunei Darussalam','Asia'),\n  ('Bulgaria','BG','BGR','Balgarija','Europe'),\n  ('Burkina Faso','BF','BFA','Burkina Faso','Africa'),\n  ('Burundi','BI','BDI','Burundi/Uburundi','Africa'),\n  ('Cambodia','KH','KHM','Cambodia','Asia'),\n  ('Cameroon','CM','CMR','Cameroun/Cameroon','Africa'),\n  ('Canada','CA','CAN','Canada','North America'),\n  ('Cape Verde','CV','CPV','Cabo Verde','Africa'),\n  ('Cayman Islands','KY','CYM','Cayman Islands','North America'),\n  ('Central African Republic','CF','CAF','Centrafrique','Africa'),\n  ('Chad','TD','TCD','Tchad/Tshad','Africa'),\n  ('Chile','CL','CHL','Chile','South America'),\n  ('China','CN','CHN','Zhongquo','Asia'),\n  ('Christmas Island','CX','CXR','Christmas Island','Oceania'),\n  ('Cocos (Keeling) Islands','CC','CCK','Cocos (Keeling) Islands','Oceania'),\n  ('Colombia','CO','COL','Colombia','South America'),\n  ('Comoros','KM','COM','Komori/Comores','Africa'),\n  ('Congo','CG','COG','Congo','Africa'),\n  ('Congo, the Democratic Republic of the','CD','COD','Republique Democratique du Congo','Africa'),\n  ('Cook Islands','CK','COK','The Cook Islands','Oceania'),\n  ('Costa Rica','CR','CRI','Costa Rica','North America'),\n  ('Cote DIvoire','CI','CIV','C\xf4te dIvoire','Africa'),\n  ('Croatia','HR','HRV','Hrvatska','Europe'),\n  ('Cuba','CU','CUB','Cuba','North America'),\n  ('Cyprus','CY','CYP','Cyprus','Asia'),\n  ('Czech Republic','CZ','CZE','Czech','Europe'),\n  ('Denmark','DK','DNK','Danmark','Europe'),\n  ('Djibouti','DJ','DJI','Djibouti/Jibuti','Africa'),\n  ('Dominica','DM','DMA','Dominica','North America'),\n  ('Dominican Republic','DO','DOM','Republica Dominicana','North America'),\n  ('Ecuador','EC','ECU','Ecuador','South America'),\n  ('Egypt','EG','EGY','Misr','Africa'),\n  ('El Salvador','SV','SLV','El Salvador','North America'),\n  ('Equatorial Guinea','GQ','GNQ','Guinea Ecuatorial','Africa'),\n  ('Eritrea','ER','ERI','Ertra','Africa'),\n  ('Estonia','EE','EST','Eesti','Europe'),\n  ('Ethiopia','ET','ETH','Yeityopiya','Africa'),\n  ('Falkland Islands (Malvinas)','FK','FLK','Falkland Islands','South America'),\n  ('Faroe Islands','FO','FRO','Faroe Islands','Europe'),\n  ('Fiji','FJ','FJI','Fiji Islands','Oceania'),\n  ('Finland','FI','FIN','Suomi','Europe'),\n  ('France','FR','FRA','France','Europe'),\n  ('French Guiana','GF','GUF','Guyane francaise','South America'),\n  ('French Polynesia','PF','PYF','Polyn\xe9sie fran\xe7aise','Oceania'),\n  ('French Southern Territories','TF','ATF','Terres australes fran\xe7aises','Antarctica'),\n  ('Gabon','GA','GAB','Le Gabon','Africa'),\n  ('Gambia','GM','GMB','The Gambia','Africa'),\n  ('Georgia','GE','GEO','Sakartvelo','Asia'),\n  ('Germany','DE','DEU','Deutschland','Europe'),\n  ('Ghana','GH','GHA','Ghana','Africa'),\n  ('Gibraltar','GI','GIB','Gibraltar','Europe'),\n  ('Greece','GR','GRC','Greece','Europe'),\n  ('Greenland','GL','GRL','Kalaallit Nunaat','North America'),\n  ('Grenada','GD','GRD','Grenada','North America'),\n  ('Guadeloupe','GP','GLP','Guadeloupe','North America'),\n  ('Guam','GU','GUM','Guam','Oceania'),\n  ('Guatemala','GT','GTM','Guatemala','North America'),\n  ('Guinea','GN','GIN','Guinea','Africa'),\n  ('Guinea-Bissau','GW','GNB','Guinea-Bissau','Africa'),\n  ('Guyana','GY','GUY','Guyana','South America'),\n  ('Haiti','HT','HTI','Haiti/Dayti','North America'),\n  ('Heard Island and Mcdonald Islands','HM','HMD','Heard and McDonald Islands','Antarctica'),\n  ('Holy See (Vatican City State)','VA','VAT','Santa Sede/Citt\xe0 del Vaticano','Europe'),\n  ('Honduras','HN','HND','Honduras','North America'),\n  ('Hong Kong','HK','HKG','Xianggang/Hong Kong','Asia'),\n  ('Hungary','HU','HUN','Hungary','Europe'),\n  ('Iceland','IS','ISL','Iceland','Europe'),\n  ('India','IN','IND','Bharat/India','Asia'),\n  ('Indonesia','ID','IDN','Indonesia','Asia'),\n  ('Iran, Islamic Republic of','IR','IRN','Iran','Asia'),\n  ('Iraq','IQ','IRQ','Al-Ir\u0101q','Asia'),\n  ('Ireland','IE','IRL','Ireland','Europe'),\n  ('Israel','IL','ISR','Yisrael','Asia'),\n  ('Italy','IT','ITA','Italia','Europe'),\n  ('Jamaica','JM','JAM','Jamaica','North America'),\n  ('Japan','JP','JPN','Nihon/Nippon','Asia'),\n  ('Jordan','JO','JOR','Al-Urdunn','Asia'),\n  ('Kazakhstan','KZ','KAZ','Qazaqstan','Asia'),\n  ('Kenya','KE','KEN','Kenya','Africa'),\n  ('Kiribati','KI','KIR','Kiribati','Oceania'),\n  ('Korea, Democratic People''s Republic of','KP','PRK','Choson Minjujuui Inmin Konghwaguk (Bukhan)','Asia'),\n  ('Korea, Republic of','KR','KOR','Taehan-minguk (Namhan)','Asia'),\n  ('Kuwait','KW','KWT','Al-Kuwayt','Asia'),\n  ('Kyrgyzstan','KG','KGZ','Kyrgyzstan','Asia'),\n  ('Lao People''s Democratic Republic','LA','LAO','Lao','Asia'),\n  ('Latvia','LV','LVA','Latvija','Europe'),\n  ('Lebanon','LB','LBN','Lubnan','Asia'),\n  ('Lesotho','LS','LSO','Lesotho','Africa'),\n  ('Liberia','LR','LBR','Liberia','Africa'),\n  ('Libya','LY','LBY','Libiya','Africa'),\n  ('Liechtenstein','LI','LIE','Liechtenstein','Europe'),\n  ('Lithuania','LT','LTU','Lietuva','Europe'),\n  ('Luxembourg','LU','LUX','Luxembourg','Europe'),\n  ('Macao','MO','MAC','Macau/Aomen','Asia'),\n  ('Macedonia, the Former Yugoslav Republic of','MK','MKD','Makedonija','Europe'),\n  ('Madagascar','MG','MDG','Madagasikara/Madagascar','Africa'),\n  ('Malawi','MW','MWI','Malawi','Africa'),\n  ('Malaysia','MY','MYS','Malaysia','Asia'),\n  ('Maldives','MV','MDV','Dhivehi Raajje/Maldives','Asia'),\n  ('Mali','ML','MLI','Mali','Africa'),\n  ('Malta','MT','MLT','Malta','Europe'),\n  ('Marshall Islands','MH','MHL','Marshall Islands/Majol','Oceania'),\n  ('Martinique','MQ','MTQ','Martinique','North America'),\n  ('Mauritania','MR','MRT','Muritaniya/Mauritanie','Africa'),\n  ('Mauritius','MU','MUS','Mauritius','Africa'),\n  ('Mayotte','YT','MYT','Mayotte','Africa'),\n  ('Mexico','MX','MEX','Mexico','North America'),\n  ('Micronesia, Federated States of','FM','FSM','Micronesia','Oceania'),\n  ('Moldova, Republic of','MD','MDA','Moldova','Europe'),\n  ('Monaco','MC','MCO','Monaco','Europe'),\n  ('Mongolia','MN','MNG','Mongol Uls','Asia'),\n  ('Albania','AL','ALB','Republika e Shqip\xebris\xeb','Europe'),\n  ('Montserrat','MS','MSR','Montserrat','North America'),\n  ('Morocco','MA','MAR','Al-Maghrib','Africa'),\n  ('Mozambique','MZ','MOZ','Mozambique','Africa'),\n  ('Myanmar','MM','MMR','Myanma Pye','Asia'),\n  ('Namibia','NA','NAM','Namibia','Africa'),\n  ('Nauru','NR','NRU','Naoero/Nauru','Oceania'),\n  ('Nepal','NP','NPL','Nepal','Asia'),\n  ('Netherlands','NL','NLD','Nederland','Europe'),\n  ('New Caledonia','NC','NCL','Nouvelle-Cal\xe9donie','Oceania'),\n  ('New Zealand','NZ','NZL','New Zealand/Aotearoa','Oceania'),\n  ('Nicaragua','NI','NIC','Nicaragua','North America'),\n  ('Niger','NE','NER','Niger','Africa'),\n  ('Nigeria','NG','NGA','Nigeria','Africa'),\n  ('Niue','NU','NIU','Niue','Oceania'),\n  ('Norfolk Island','NF','NFK','Norfolk Island','Oceania'),\n  ('Northern Mariana Islands','MP','MNP','Northern Mariana Islands','Oceania'),\n  ('Norway','NO','NOR','Norge','Europe'),\n  ('Oman','OM','OMN','Oman','Asia'),\n  ('Pakistan','PK','PAK','Pakistan','Asia'),\n  ('Palau','PW','PLW','Belau/Palau','Oceania'),\n  ('Palestine, State of','PS','PSE','Filastin','Asia'),\n  ('Panama','PA','PAN','Rep\xfablica de Panam\xe1','North America'),\n  ('Papua New Guinea','PG','PNG','Papua New Guinea/Papua Niugini','Oceania'),\n  ('Paraguay','PY','PRY','Paraguay','South America'),\n  ('Peru','PE','PER','Per\xfa/Piruw','South America'),\n  ('Philippines','PH','PHL','Pilipinas','Asia'),\n  ('Pitcairn','PN','PCN','Pitcairn','Oceania'),\n  ('Poland','PL','POL','Polska','Europe'),\n  ('Portugal','PT','PRT','Portugal','Europe'),\n  ('Puerto Rico','PR','PRI','Puerto Rico','North America'),\n  ('Qatar','QA','QAT','Qatar','Asia'),\n  ('Reunion','RE','REU','Reunion','Africa'),\n  ('Romania','RO','ROM','Romania','Europe'),\n  ('Russian Federation','RU','RUS','Rossija','Europe'),\n  ('Rwanda','RW','RWA','Rwanda/Urwanda','Africa'),\n  ('Saint Helena, Ascension and Tristan da Cunha','SH','SHN','Saint Helena','Africa'),\n  ('Saint Kitts and Nevis','KN','KNA','Saint Kitts and Nevis','North America'),\n  ('Saint Lucia','LC','LCA','Saint Lucia','North America'),\n  ('Saint Pierre and Miquelon','PM','SPM','Saint-Pierre-et-Miquelon','North America'),\n  ('Saint Vincent and the Grenadines','VC','VCT','Saint Vincent and the Grenadines','North America'),\n  ('Samoa','WS','WSM','Samoa','Oceania'),\n  ('San Marino','SM','SMR','San Marino','Europe'),\n  ('Sao Tome and Principe','ST','STP','S\xe3o Tom\xe9 e Pr\xedncipe','Africa'),\n  ('Saudi Arabia','SA','SAU','Al-Mamlaka al-Arabiya as-Saudiya','Asia'),\n  ('Senegal','SN','SEN','S\xe9n\xe9gal/Sounougal','Africa'),\n  ('Seychelles','SC','SYC','Sesel/Seychelles','Africa'),\n  ('Sierra Leone','SL','SLE','Sierra Leone','Africa'),\n  ('Singapore','SG','SGP','Singapore/Singapura/Xinjiapo/Singapur','Asia'),\n  ('Slovakia','SK','SVK','Slovensko','Europe'),\n  ('Slovenia','SI','SVN','Slovenija','Europe'),\n  ('Solomon Islands','SB','SLB','Solomon Islands','Oceania'),\n  ('Somalia','SO','SOM','Soomaaliya','Africa'),\n  ('South Africa','ZA','ZAF','South Africa','Africa'),\n  ('South Georgia and the South Sandwich Islands','GS','SGS','South Georgia and the South Sandwich Islands','Antarctica'),\n  ('Spain','ES','ESP','Espa\xf1a','Europe'),\n  ('Sri Lanka','LK','LKA','Sri Lanka/Ilankai','Asia'),\n  ('Sudan','SD','SDN','As-Sudan','Africa'),\n  ('Suriname','SR','SUR','Suriname','South America'),\n  ('Svalbard and Jan Mayen','SJ','SJM','Svalbard og Jan Mayen','Europe'),\n  ('Swaziland','SZ','SWZ','kaNgwane','Africa'),\n  ('Sweden','SE','SWE','Sverige','Europe'),\n  ('Switzerland','CH','CHE','Schweiz/Suisse/Svizzera/Svizra','Europe'),\n  ('Syrian Arab Republic','SY','SYR','Suriya','Asia'),\n  ('Taiwan (Province of China)','TW','TWN','Tai-wan','Asia'),\n  ('Tajikistan','TJ','TJK','Tajikistan','Asia'),\n  ('Tanzania, United Republic of','TZ','TZA','Tanzania','Africa'),\n  ('Thailand','TH','THA','Prathet Thai','Asia'),\n  ('Togo','TG','TGO','Togo','Africa'),\n  ('Tokelau','TK','TKL','Tokelau','Oceania'),\n  ('Tonga','TO','TON','Tonga','Oceania'),\n  ('Trinidad and Tobago','TT','TTO','Trinidad and Tobago','North America'),\n  ('Tunisia','TN','TUN','Tunis/Tunisie','Africa'),\n  ('Turkey','TR','TUR','T\xfcrkiye','Asia'),\n  ('Turkmenistan','TM','TKM','T\xfcrkmenistan','Asia'),\n  ('Turks and Caicos Islands','TC','TCA','The Turks and Caicos Islands','North America'),\n  ('Tuvalu','TV','TUV','Tuvalu','Oceania'),\n  ('Uganda','UG','UGA','Uganda','Africa'),\n  ('Ukraine','UA','UKR','Ukrajina','Europe'),\n  ('United Arab Emirates','AE','ARE','Al-Amirat al-Arabiya al-Muttahida','Asia'),\n  ('United Kingdom','GB','GBR','United Kingdom','Europe'),\n  ('United States','US','USA','United States','North America'),\n  ('United States Minor Outlying Islands','UM','UMI','United States Minor Outlying Islands','Oceania'),\n  ('Uruguay','UY','URY','Uruguay','South America'),\n  ('Uzbekistan','UZ','UZB','Uzbekiston','Asia'),\n  ('Vanuatu','VU','VUT','Vanuatu','Oceania'),\n  ('Venezuela','VE','VEN','Venezuela','South America'),\n  ('Viet Nam','VN','VNM','Viet Nam','Asia'),\n  ('Virgin Islands (British)','VG','VGB','British Virgin Islands','North America'),\n  ('Virgin Islands (U.S.)','VI','VIR','Virgin Islands of the United States','North America'),\n  ('Wallis and Futuna','WF','WLF','Wallis-et-Futuna','Oceania'),\n  ('Western Sahara','EH','ESH','As-Sahrawiya','Africa'),\n  ('Yemen','YE','YEM','Al-Yaman','Asia'),\n  ('Zambia','ZM','ZMB','Zambia','Africa'),\n  ('Zimbabwe','ZW','ZWE','Zimbabwe','Africa'),\n  ('Afghanistan','AF','AFG','Afganistan/Afqanestan','Asia'),\n  ('Algeria','DZ','DZA','Al-Jazair/Algerie','Africa');\n".trim()},{id:11,type:"quickstart",title:"Slack Clone",description:"Build a basic slack clone with Row Level Security.",sql:"\n--\n-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone\n\n-- Custom types\ncreate type public.app_permission as enum ('channels.delete', 'messages.delete');\ncreate type public.app_role as enum ('admin', 'moderator');\ncreate type public.user_status as enum ('ONLINE', 'OFFLINE');\n\n-- USERS\ncreate table public.users (\n  id          uuid not null primary key, -- UUID from auth.users\n  username    text,\n  status      user_status default 'OFFLINE'::public.user_status\n);\ncomment on table public.users is 'Profile data for each user.';\ncomment on column public.users.id is 'References the internal Supabase Auth user.';\n\n-- CHANNELS\ncreate table public.channels (\n  id            bigint generated by default as identity primary key,\n  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,\n  slug          text not null unique,\n  created_by    uuid references public.users not null\n);\ncomment on table public.channels is 'Topics and groups.';\n\n-- MESSAGES\ncreate table public.messages (\n  id            bigint generated by default as identity primary key,\n  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,\n  message       text,\n  user_id       uuid references public.users not null,\n  channel_id    bigint references public.channels on delete cascade not null\n);\ncomment on table public.messages is 'Individual messages sent by each user.';\n\n-- USER ROLES\ncreate table public.user_roles (\n  id        bigint generated by default as identity primary key,\n  user_id   uuid references public.users on delete cascade not null,\n  role      app_role not null,\n  unique (user_id, role)\n);\ncomment on table public.user_roles is 'Application roles for each user.';\n\n-- ROLE PERMISSIONS\ncreate table public.role_permissions (\n  id           bigint generated by default as identity primary key,\n  role         app_role not null,\n  permission   app_permission not null,\n  unique (role, permission)\n);\ncomment on table public.role_permissions is 'Application permissions for each role.';\n\n-- authorize with role-based access control (RBAC)\ncreate function public.authorize(\n  requested_permission app_permission,\n  user_id uuid\n)\nreturns boolean as\n$$\n  declare\n    bind_permissions int;\n  begin\n    select\n      count(*)\n    from public.role_permissions\n    inner join public.user_roles on role_permissions.role = user_roles.role\n    where\n      role_permissions.permission = authorize.requested_permission and\n      user_roles.user_id = authorize.user_id\n    into bind_permissions;\n\n    return bind_permissions > 0;\n  end;\n$$\nlanguage plpgsql security definer;\n\n-- Secure the tables\nalter table public.users\n  enable row level security;\nalter table public.channels\n  enable row level security;\nalter table public.messages\n  enable row level security;\nalter table public.user_roles\n  enable row level security;\nalter table public.role_permissions\n  enable row level security;\n\ncreate policy \"Allow logged-in read access\" on public.users\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.users\n  for insert with check (auth.uid() = id);\ncreate policy \"Allow individual update access\" on public.users\n  for update using ( auth.uid() = id );\ncreate policy \"Allow logged-in read access\" on public.channels\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.channels\n  for insert with check (auth.uid() = created_by);\ncreate policy \"Allow individual delete access\" on public.channels\n  for delete using (auth.uid() = created_by);\ncreate policy \"Allow authorized delete access\" on public.channels\n  for delete using (authorize('channels.delete', auth.uid()));\ncreate policy \"Allow logged-in read access\" on public.messages\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.messages\n  for insert with check (auth.uid() = user_id);\ncreate policy \"Allow individual update access\" on public.messages\n  for update using (auth.uid() = user_id);\ncreate policy \"Allow individual delete access\" on public.messages\n  for delete using (auth.uid() = user_id);\ncreate policy \"Allow authorized delete access\" on public.messages\n  for delete using (authorize('messages.delete', auth.uid()));\ncreate policy \"Allow individual read access\" on public.user_roles\n  for select using (auth.uid() = user_id);\n\n-- Send \"previous data\" on change\nalter table public.users\n  replica identity full;\nalter table public.channels\n  replica identity full;\nalter table public.messages\n  replica identity full;\n\n-- inserts a row into public.users and assigns roles\ncreate function public.handle_new_user()\nreturns trigger as\n$$\n  declare is_admin boolean;\n  begin\n    insert into public.users (id, username)\n    values (new.id, new.email);\n\n    select count(*) = 1 from auth.users into is_admin;\n\n    if position('+supaadmin@' in new.email) > 0 then\n      insert into public.user_roles (user_id, role) values (new.id, 'admin');\n    elsif position('+supamod@' in new.email) > 0 then\n      insert into public.user_roles (user_id, role) values (new.id, 'moderator');\n    end if;\n\n    return new;\n  end;\n$$ language plpgsql security definer;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n/**\n * REALTIME SUBSCRIPTIONS\n * Only allow realtime listening on public tables.\n */\n\nbegin;\n  -- remove the realtime publication\n  drop publication if exists supabase_realtime;\n\n  -- re-create the publication but don't enable it for any tables\n  create publication supabase_realtime;\ncommit;\n\n-- add tables to the publication\nalter publication supabase_realtime add table public.channels;\nalter publication supabase_realtime add table public.messages;\nalter publication supabase_realtime add table public.users;\n\n-- DUMMY DATA\ninsert into public.users (id, username)\nvalues\n    ('8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e', 'supabot');\n\ninsert into public.channels (slug, created_by)\nvalues\n    ('public', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),\n    ('random', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');\n\ninsert into public.messages (message, channel_id, user_id)\nvalues\n    ('Hello World \ud83d\udc4b', 1, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),\n    ('Perfection is attained, not when there is nothing more to add, but when there is nothing left to take away.', 2, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');\n\ninsert into public.role_permissions (role, permission)\nvalues\n    ('admin', 'channels.delete'),\n    ('admin', 'messages.delete'),\n    ('moderator', 'messages.delete');\n".trim()},{id:12,type:"quickstart",title:"Todo List",description:"Build a basic todo list with Row Level Security.",sql:'\n--\n-- For use with:\n-- https://github.com/supabase/supabase/tree/master/examples/todo-list/sveltejs-todo-list or\n-- https://github.com/supabase/examples-archive/tree/main/supabase-js-v1/todo-list\n--\n\ncreate table todos (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users not null,\n  task text check (char_length(task) > 3),\n  is_complete boolean default false,\n  inserted_at timestamp with time zone default timezone(\'utc\'::text, now()) not null\n);\nalter table todos enable row level security;\ncreate policy "Individuals can create todos." on todos for\n    insert with check (auth.uid() = user_id);\ncreate policy "Individuals can view their own todos. " on todos for\n    select using (auth.uid() = user_id);\ncreate policy "Individuals can update their own todos." on todos for\n    update using (auth.uid() = user_id);\ncreate policy "Individuals can delete their own todos." on todos for\n    delete using (auth.uid() = user_id);\n'.trim()},{id:13,type:"quickstart",title:"Stripe Subscriptions",description:"Starter template for the Next.js Stripe Subscriptions Starter.",sql:"\n/**\n* USERS\n* Note: This table contains user data. Users should only be able to view and update their own data.\n*/\ncreate table users (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  full_name text,\n  avatar_url text,\n  -- The customer's billing address, stored in JSON format.\n  billing_address jsonb,\n  -- Stores your customer's payment instruments.\n  payment_method jsonb\n);\nalter table users\n  enable row level security;\ncreate policy \"Can view own user data.\" on users\n  for select using (auth.uid() = id);\ncreate policy \"Can update own user data.\" on users\n  for update using (auth.uid() = id);\n\n/**\n* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.\n*/\ncreate function public.handle_new_user()\nreturns trigger as\n$$\n  begin\n    insert into public.users (id, full_name, avatar_url)\n    values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n    return new;\n  end;\n$$\nlanguage plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row\n    execute procedure public.handle_new_user();\n\n/**\n* CUSTOMERS\n* Note: this is a private table that contains a mapping of user IDs to Strip customer IDs.\n*/\ncreate table customers (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  -- The user's customer ID in Stripe. User must not be able to update this.\n  stripe_customer_id text\n);\nalter table customers enable row level security;\n-- No policies as this is a private table that the user must not have access to.\n\n/**\n* PRODUCTS\n* Note: products are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate table products (\n  -- Product ID from Stripe, e.g. prod_1234.\n  id text primary key,\n  -- Whether the product is currently available for purchase.\n  active boolean,\n  -- The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.\n  name text,\n  -- The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n  description text,\n  -- A URL of the product image in Stripe, meant to be displayable to the customer.\n  image text,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table products\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on products\n  for select using (true);\n\n/**\n* PRICES\n* Note: prices are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type pricing_type as enum ('one_time', 'recurring');\ncreate type pricing_plan_interval as enum ('day', 'week', 'month', 'year');\ncreate table prices (\n  -- Price ID from Stripe, e.g. price_1234.\n  id text primary key,\n  -- The ID of the prduct that this price belongs to.\n  product_id text references products,\n  -- Whether the price can be used for new purchases.\n  active boolean,\n  -- A brief description of the price.\n  description text,\n  -- The unit amount as a positive integer in the smallest currency unit (e.g., 100 cents for US$1.00 or 100 for \xa5100, a zero-decimal currency).\n  unit_amount bigint,\n  -- Three-letter ISO currency code, in lowercase.\n  currency text check (char_length(currency) = 3),\n  -- One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n  type pricing_type,\n  -- The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n  interval pricing_plan_interval,\n  -- The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.\n  interval_count integer,\n  -- Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).\n  trial_period_days integer,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table prices\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on prices\n  for select using (true);\n\n/**\n* SUBSCRIPTIONS\n* Note: subscriptions are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type subscription_status as enum ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid');\ncreate table subscriptions (\n  -- Subscription ID from Stripe, e.g. sub_1234.\n  id text primary key,\n  user_id uuid references auth.users not null,\n  -- The status of the subscription object, one of subscription_status type above.\n  status subscription_status,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb,\n  -- ID of the price that created this subscription.\n  price_id text references prices,\n  -- Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.\n  quantity integer,\n  -- If true the subscription has been canceled by the user and will be deleted at the end of the billing period.\n  cancel_at_period_end boolean,\n  -- Time at which the subscription was created.\n  created timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- Start of the current period that the subscription has been invoiced for.\n  current_period_start timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n  current_period_end timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- If the subscription has ended, the timestamp of the date the subscription ended.\n  ended_at timestamp with time zone default timezone('utc'::text, now()),\n  -- A date in the future at which the subscription will automatically get canceled.\n  cancel_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.\n  canceled_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the beginning of that trial.\n  trial_start timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the end of that trial.\n  trial_end timestamp with time zone default timezone('utc'::text, now())\n);\nalter table subscriptions\n  enable row level security;\ncreate policy \"Can only view own subs data.\" on subscriptions\n  for select using (auth.uid() = user_id);\n\n/**\n * REALTIME SUBSCRIPTIONS\n * Only allow realtime listening on public tables.\n */\ndrop publication if exists supabase_realtime;\ncreate publication supabase_realtime\n  for table products, prices;\n".trim()},{id:14,type:"quickstart",title:"User Management Starter",description:"Sets up a public Profiles table which you can access with your API.",sql:"\n-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users on delete cascade not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n".trim()},{id:15,type:"quickstart",title:"NextAuth Schema Setup",description:"Sets up a the Schema and Tables for the NextAuth Supabase Adapter.",sql:'\n--\n-- Name: next_auth; Type: SCHEMA;\n--\nCREATE SCHEMA next_auth;\n\nGRANT USAGE ON SCHEMA next_auth TO service_role;\nGRANT ALL ON SCHEMA next_auth TO postgres;\n\n--\n-- Create users table\n--\nCREATE TABLE IF NOT EXISTS next_auth.users\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    name text,\n    email text,\n    "emailVerified" timestamp with time zone,\n    image text,\n    CONSTRAINT users_pkey PRIMARY KEY (id),\n    CONSTRAINT email_unique UNIQUE (email)\n);\n\nGRANT ALL ON TABLE next_auth.users TO postgres;\nGRANT ALL ON TABLE next_auth.users TO service_role;\n\n--- uid() function to be used in RLS policies\nCREATE FUNCTION next_auth.uid() RETURNS uuid\n    LANGUAGE sql STABLE\n    AS $$\n  select\n    coalesce(\n        nullif(current_setting(\'request.jwt.claim.sub\', true), \'\'),\n        (nullif(current_setting(\'request.jwt.claims\', true), \'\')::jsonb ->> \'sub\')\n    )::uuid\n$$;\n\n--\n-- Create sessions table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.sessions\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    expires timestamp with time zone NOT NULL,\n    "sessionToken" text NOT NULL,\n    "userId" uuid,\n    CONSTRAINT sessions_pkey PRIMARY KEY (id),\n    CONSTRAINT sessionToken_unique UNIQUE ("sessionToken"),\n    CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.sessions TO postgres;\nGRANT ALL ON TABLE next_auth.sessions TO service_role;\n\n--\n-- Create accounts table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.accounts\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    type text NOT NULL,\n    provider text NOT NULL,\n    "providerAccountId" text NOT NULL,\n    refresh_token text,\n    access_token text,\n    expires_at bigint,\n    token_type text,\n    scope text,\n    id_token text,\n    session_state text,\n    oauth_token_secret text,\n    oauth_token text,\n    "userId" uuid,\n    CONSTRAINT accounts_pkey PRIMARY KEY (id),\n    CONSTRAINT provider_unique UNIQUE (provider, "providerAccountId"),\n    CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.accounts TO postgres;\nGRANT ALL ON TABLE next_auth.accounts TO service_role;\n\n--\n-- Create verification_tokens table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.verification_tokens\n(\n    identifier text,\n    token text,\n    expires timestamp with time zone NOT NULL,\n    CONSTRAINT verification_tokens_pkey PRIMARY KEY (token),\n    CONSTRAINT token_unique UNIQUE (token),\n    CONSTRAINT token_identifier_unique UNIQUE (token, identifier)\n);\n\nGRANT ALL ON TABLE next_auth.verification_tokens TO postgres;\nGRANT ALL ON TABLE next_auth.verification_tokens TO service_role;\n'.trim()},{id:16,type:"template",title:"Most frequently invoked",description:"Most frequently called queries in your database.",sql:"-- Most frequently called queries\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    statements.calls desc\n  limit\n    100;"},{id:17,type:"template",title:"Most time consuming",description:"Aggregate time spent on a query type.",sql:"-- Most time consuming queries\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    to_char(((statements.total_exec_time + statements.total_plan_time)/sum(statements.total_exec_time + statements.total_plan_time) over()) * 100, 'FM90D0') || '%' as prop_total_time\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    total_time desc\n  limit\n    100;"},{id:18,type:"template",title:"Slowest execution time",description:"Slowest queries based on max execution time.",sql:"-- Slowest queries by max execution time\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    max_time desc\n  limit\n    100;"},{id:19,type:"template",title:"Hit rate",description:"See your cache and index hit rate.",sql:"-- Cache and index hit rate\n\nselect\n    'index hit rate' as name,\n    (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read),0) as ratio\n  from pg_statio_user_indexes\n  union all\n  select\n    'table hit rate' as name,\n    sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read),0) as ratio\n  from pg_statio_user_tables;"}]}}]);
//# sourceMappingURL=2036-23fcbcbee5482f1f.js.map